########### Pig

--question 1 load files
rides = LOAD '/user/cloudera/bixitrips/' USING PigStorage(',');
data = FILTER rides BY $0 != 'start_date'; --remove heraders

stationsh = LOAD '/user/cloudera/bixi/Stations_2017.csv' USING PigStorage(',');
stations = FILTER stationsh BY $0 != 'code'; -- remove headers


--question 2 get the counting rows 

datag = GROUP data ALL;
datacount = FOREACH datag GENERATE COUNT(data);
dump datacount;

stationsg = GROUP stations ALL;
stationscount = FOREACH stationsg GENERATE COUNT(stations);
dump stationscount;

--question 3 break down members and not members

nonmembers = FILTER data BY $5 == 0;

member = FILTER data BY $5 == 1;


--question 4 counting for relation members and non-memebers

nonmembersgroup = GROUP nonmembers ALL;
countingnonmembers = FOREACH nonmembersgroup GENERATE COUNT(nonmembers);
dump countingnonmembers;

membersgroup = GROUP member ALL;
countingmembers = FOREACH membersgroup GENERATE COUNT(member);
dump countingmembers;

-- question 5 return all information regarding  a station code

alldata = JOIN stations by $0 , data by $1;
finddata = FILTER alldata BY $0 == '6209';

-- question 6 how many rides pero departure stations

departures = GROUP data BY $1;
departurescounting = FOREACH departures GENERATE group,COUNT(data);
dump departurescounting;

-- question 7 return by station qty rides and min, max, avg ride time

------members
membersgroup = GROUP member ALL;
agregationmembers = FOREACH membersgroup {
                qty_trips = COUNT(member);
                min_time = MIN(member.$4);
                max_time = MAX(member.$4);
                avg_time = AVG(member.$4);
                GENERATE group, qty_trips,min_time,max_time,avg_time;
                };

dump agregationmembers;


------- non members

nonmembersgroup = GROUP nonmembers ALL;
agregationmembers = FOREACH membersgroup {
                qty_trips = COUNT(nonmembers);
                min_time = MIN(nonmembers.$4);
                max_time = MAX(nonmembers.$4);
                avg_time = AVG(nonmembers.$4);
                GENERATE group, qty_trips,min_time,max_time,avg_time;
                };

dump agregationmembers;
                
--question 8 top 5 most used stations

------members

alldata = JOIN stations by $0 , member by $1;
allddatasample = FOREACH alldata GENERATE $0,$1,$4;
groupdata = GROUP allddatasample BY $1;
rankdata = FOREACH groupdata GENERATE group,COUNT(allddatasample);
sortrank = ORDER rankdata BY $1 DESC;
topstations = LIMIT sortrank 5;
dump topstations;

------ non members

alldata = JOIN stations by $0 , nonmembers by $1;
allddatasample = FOREACH alldata GENERATE $0,$1,$4;
groupdata = GROUP allddatasample BY $1;
rankdata = FOREACH groupdata GENERATE group,COUNT(allddatasample);
sortrank = ORDER rankdata BY $1 DESC;
topstations = LIMIT sortrank 5;
dump topstations;

######## Hive

-----Question 1 Create tables

CREATE EXTERNAL TABLE tbl_stationtripsh
(
start_date string,
start_station_code string,
end_date string,
end_station_code string,
duration_sec string,
is_member string
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION '/user/cloudera/bixitrips/';

CREATE EXTERNAL TABLE tbl_stationsh
(
code string,
name string,
latitude string,
longitude string

)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION '/user/cloudera/bixi/';

CREATE TABLE tbl_stationtrips
AS
SELECT * FROM tbl_stationtripsh WHERE start_date not like '%start_date%';

CREATE TABLE tbl_stations
AS
SELECT * FROM tbl_stationsh WHERE code not like '%code%';

--- question 2 print the number of rows per table

SELECT COUNT(*) as rows_qty,'rows_stations' FROM tbl_stations
UNION ALL
SELECT COUNT(*) as rows_qty,'rows_stationtrips' FROM tbl_stationtrips;

-- question 3 create members and non-members tables

CREATE TABLE tbl_stationtrips_members
AS
SELECT * FROM tbl_stationtrips WHERE CAST(is_member AS int) = 1;

CREATE TABLE tbl_stationtrips_nonmembers
AS
SELECT * FROM tbl_stationtrips WHERE CAST(is_member AS int) = 0;

-- question 4 qty rows on each table member and non-member

SELECT COUNT(*), 'rows_members'  FROM tbl_stationtrips_members
UNION ALL
SELECT COUNT(*) , 'rows_nonmembers' FROM tbl_stationtrips_nonmembers;

-- question 5 return all information regarding  a station code

SELECT 
name,
latitude ,
longitude,
start_date,
start_station_code,
end_date,
end_station_code,
duration_sec,
is_member
FROM tbl_stations st INNER JOIN tbl_stationtrips trp
ON st.code = trp.start_station_code
WHERE CAST(st.code AS INT) = 6209;

-- question 6 calculate # of rides of departure by station

SELECT 
start_station_code,
name,
count(*)
FROM tbl_stations st INNER JOIN tbl_stationtrips trp
ON st.code = trp.start_station_code
GROUP BY start_station_code,name
ORDER BY 3 DESC;

-- question 7 

------------ members
SELECT 
start_station_code,
name,
COUNT(*) as qty_rides,
MIN(duration_sec) as min_duration,
MAX(duration_sec) as max_duration,
AVG(duration_sec) as avg_duration
FROM tbl_stations st INNER JOIN tbl_stationtrips_members trp
ON st.code = trp.start_station_code
GROUP BY start_station_code,name;

------------- non-members
SELECT 
start_station_code,
name,
COUNT(*) as qty_rides,
MIN(duration_sec) as min_duration,
MAX(duration_sec) as max_duration,
AVG(duration_sec) as avg_duration
FROM tbl_stations st INNER JOIN tbl_stationtrips_nonmembers trp
ON st.code = trp.start_station_code
GROUP BY start_station_code,name;

-- question 8 top 5 members and non members

------------ members
SELECT 
start_station_code,
name,
COUNT(*) as qty_rides,
MIN(duration_sec) as min_duration,
MAX(duration_sec) as max_duration,
AVG(duration_sec) as avg_duration
FROM tbl_stations st INNER JOIN tbl_stationtrips_members trp
ON st.code = trp.start_station_code
GROUP BY start_station_code,name
SORT BY 3 DESC
LIMIT 5;

------------- non-members
SELECT 
start_station_code,
name,
COUNT(*) as qty_rides,
MIN(duration_sec) as min_duration,
MAX(duration_sec) as max_duration,
AVG(duration_sec) as avg_duration
FROM tbl_stations st INNER JOIN tbl_stationtrips_nonmembers trp
ON st.code = trp.start_station_code
GROUP BY start_station_code,name
SORT BY 3 DESC
LIMIT 5;

-- question 9 longest and shortest ride
------------ members
SELECT 
start_station_code,
name,
MIN(duration_sec) as min_duration,
MAX(duration_sec) as max_duration
FROM tbl_stations st INNER JOIN tbl_stationtrips_members trp
ON st.code = trp.start_station_code
GROUP BY start_station_code,name
SORT BY 1 DESC;


------------ non-members
SELECT 
start_station_code,
name,
MIN(duration_sec) as min_duration,
MAX(duration_sec) as max_duration
FROM tbl_stations st INNER JOIN tbl_stationtrips_nonmembers trp
ON st.code = trp.start_station_code
GROUP BY start_station_code,name
SORT BY 1 DESC;

-- question 10 partition table by is_member

CREATE TABLE tbl_members_partition
(
start_date string,
start_station_code string,
end_date string,
end_station_code string,
duration_sec string,
is_member string
)
PARTITIONED BY ( member int)
STORED AS TEXTFILE;

INSERT OVERWRITE TABLE  tbl_members_partition
PARTITION ( member = 1)
SELECT * FROM tbl_stationtrips_members;

INSERT OVERWRITE TABLE  tbl_members_partition
PARTITION ( member = 0)
SELECT * FROM tbl_stationtrips_nonmembers;

-- question 11 partition and bucket table 

CREATE TABLE tbl_members_partition_bucket
(
start_date string,
start_station_code string,
end_date string,
end_station_code string,
duration_sec string,
is_member string
)
PARTITIONED BY ( member int)
CLUSTERED BY (start_station_code) SORTED BY (duration_sec DESC)  INTO 8 BUCKETS 
STORED AS TEXTFILE;

INSERT OVERWRITE TABLE  tbl_members_partition_bucket
PARTITION ( member = 1)
SELECT * FROM tbl_stationtrips_members;

INSERT OVERWRITE TABLE  tbl_members_partition
PARTITION ( member = 0)
SELECT * FROM tbl_stationtrips_nonmembers;

-- question 12 querying on bucked table

select count(*) FROM tbl_members_partition_bucket;
